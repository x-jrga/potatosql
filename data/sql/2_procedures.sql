CREATE PROCEDURE PUBLIC.DATABASESCHEMA_INSERT (IN V_NAME VARCHAR(300)) SPECIFIC DATABASESCHEMA_INSERT_10134 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC INSERT INTO PUBLIC.DATABASESCHEMA
(
  SCHEMAID,
  NAME
)
VALUES
(
  DEFAULT,
  V_NAME
);

END 
/

CREATE PROCEDURE PUBLIC.DATABASESCHEMA_INSERT (OUT NEWID INTEGER,IN V_NAME VARCHAR(300)) SPECIFIC DATABASESCHEMA_INSERT_10135 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC INSERT INTO PUBLIC.DATABASESCHEMA
(
  SCHEMAID,
  NAME
)
VALUES
(
  DEFAULT,
  V_NAME
);

SET NEWID = IDENTITY();

END CREATE PROCEDURE PUBLIC.DATABASESCHEMA_UPDATE (IN V_SCHEMAID INTEGER,IN V_NAME VARCHAR(300)) SPECIFIC DATABASESCHEMA_UPDATE_10136 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC UPDATE PUBLIC.DATABASESCHEMA
   SET NAME = V_NAME
WHERE SCHEMAID = V_SCHEMAID;

END 
/

CREATE PROCEDURE PUBLIC.DATABASESCHEMA_DELETE (IN V_SCHEMAID INTEGER) SPECIFIC DATABASESCHEMA_DELETE_10137 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC DELETE
FROM PUBLIC.DATABASESCHEMA
WHERE SCHEMAID = V_SCHEMAID;

END 
/

CREATE PROCEDURE PUBLIC.DATABASESCHEMA_SELECT_ALL () SPECIFIC DATABASESCHEMA_SELECT_ALL_10139 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE RESULT CURSOR
FOR
SELECT SCHEMAID,
       NAME
FROM PUBLIC.DATABASESCHEMA;

OPEN RESULT;

END 
/

CREATE PROCEDURE PUBLIC.DATABASETABLE_INSERT (IN V_SCHEMAID INTEGER,IN V_NAME VARCHAR(300)) SPECIFIC DATABASETABLE_INSERT_10140 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC INSERT INTO PUBLIC.DATABASETABLE
(
  SCHEMAID,
  TABLEID,
  NAME
)
VALUES
(
  V_SCHEMAID,
  DEFAULT,
  V_NAME
);

END 
/

CREATE PROCEDURE PUBLIC.DATABASETABLE_INSERT (IN V_SCHEMAID INTEGER,OUT NEWID INTEGER,IN V_NAME VARCHAR(8000)) SPECIFIC DATABASETABLE_INSERT_10141 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC INSERT INTO PUBLIC.DATABASETABLE
(
  SCHEMAID,
  TABLEID,
  NAME
)
VALUES
(
  V_SCHEMAID,
  DEFAULT,
  V_NAME
);

SET NEWID = IDENTITY();

END 
/

CREATE PROCEDURE PUBLIC.DATABASETABLE_UPDATE (IN V_SCHEMAID INTEGER,IN V_TABLEID INTEGER,IN V_NAME VARCHAR(300)) SPECIFIC DATABASETABLE_UPDATE_10142 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC UPDATE PUBLIC.DATABASETABLE
   SET NAME = V_NAME
WHERE SCHEMAID = V_SCHEMAID
AND   TABLEID = V_TABLEID;

END 
/

CREATE PROCEDURE PUBLIC.DATABASETABLE_DELETE (IN V_SCHEMAID INTEGER,IN V_TABLEID INTEGER) SPECIFIC DATABASETABLE_DELETE_10143 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC DELETE
FROM PUBLIC.DATABASETABLE
WHERE SCHEMAID = V_SCHEMAID
AND   TABLEID = V_TABLEID;

END 
/

CREATE PROCEDURE PUBLIC.DATABASETABLE_SELECT (IN V_SCHEMAID INTEGER) SPECIFIC DATABASETABLE_SELECT_10145 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE RESULT CURSOR
FOR
SELECT SCHEMAID,
       TABLEID,
       NAME
FROM PUBLIC.DATABASETABLE
WHERE SCHEMAID = V_SCHEMAID;

OPEN RESULT;

END 
/

CREATE PROCEDURE PUBLIC.DATABASETABLE_SELECT (IN V_SCHEMAID INTEGER,IN V_TABLEID INTEGER) SPECIFIC DATABASETABLE_SELECT_10147 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE RESULT CURSOR
FOR
SELECT SCHEMAID,
       TABLEID,
       NAME
FROM PUBLIC.DATABASETABLE
WHERE SCHEMAID = V_SCHEMAID
AND   TABLEID = V_TABLEID;

OPEN RESULT;

END 
/

CREATE PROCEDURE PUBLIC.TABLEKEY_INSERT (IN V_SCHEMAID INTEGER,IN V_TABLEID INTEGER,IN V_NAME VARCHAR(300),IN V_LABEL VARCHAR(300),IN V_ISPK BOOLEAN,IN V_TYPEID INTEGER,IN V_PRECISION INTEGER,IN V_SCALE INTEGER,IN V_ORDEN INTEGER) SPECIFIC TABLEKEY_INSERT_10148 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC INSERT INTO PUBLIC.TABLEKEY
(
  SCHEMAID,
  TABLEID,
  KEYID,
  NAME,
  LABEL,
  ISPK,
  TYPEID,
  PRECISION,
  SCALE,
  ORDEN
)
VALUES
(
  V_SCHEMAID,
  V_TABLEID,
  DEFAULT,
  V_NAME,
  V_LABEL,
  V_ISPK,
  V_TYPEID,
  V_PRECISION,
  V_SCALE,
  V_ORDEN
);

END 
/

CREATE PROCEDURE PUBLIC.TABLEKEY_INSERT (OUT NEWID INTEGER,IN V_SCHEMAID INTEGER,IN V_TABLEID INTEGER,IN V_NAME VARCHAR(300),IN V_LABEL VARCHAR(300),IN V_ISPK BOOLEAN,IN V_TYPEID INTEGER,IN V_PRECISION INTEGER,IN V_SCALE INTEGER,IN V_ORDEN INTEGER) SPECIFIC TABLEKEY_INSERT_10323 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC INSERT INTO PUBLIC.TABLEKEY
(
  SCHEMAID,
  TABLEID,
  KEYID,
  NAME,
  LABEL,
  ISPK,
  TYPEID,
  PRECISION,
  SCALE,
  ORDEN
)
VALUES
(
  V_SCHEMAID,
  V_TABLEID,
  DEFAULT,
  V_NAME,
  V_LABEL,
  V_ISPK,
  V_TYPEID,
  V_PRECISION,
  V_SCALE,
  V_ORDEN
);

SET NEWID = IDENTITY();

END 
/

CREATE PROCEDURE PUBLIC.TABLEKEY_UPDATE (IN V_SCHEMAID INTEGER,IN V_TABLEID INTEGER,IN V_KEYID INTEGER,IN V_NAME VARCHAR(300),IN V_LABEL VARCHAR(300),IN V_ISPK BOOLEAN,IN V_TYPEID INTEGER,IN V_PRECISION INTEGER,IN V_SCALE INTEGER,IN V_ORDEN INTEGER) SPECIFIC TABLEKEY_UPDATE_10149 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC UPDATE PUBLIC.TABLEKEY
   SET NAME = V_NAME,
       LABEL = V_LABEL,
       ISPK = V_ISPK,
       TYPEID = V_TYPEID,
       PRECISION = V_PRECISION,
       SCALE = V_SCALE,
       ORDEN = V_ORDEN
WHERE SCHEMAID = V_SCHEMAID
AND   TABLEID = V_TABLEID
AND   KEYID = V_KEYID;

END 
/

CREATE PROCEDURE PUBLIC.TABLEKEY_DELETE (IN V_SCHEMAID INTEGER,IN V_TABLEID INTEGER,IN V_KEYID INTEGER) SPECIFIC TABLEKEY_DELETE_10150 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC DELETE
FROM PUBLIC.TABLEKEY
WHERE SCHEMAID = V_SCHEMAID
AND   TABLEID = V_TABLEID
AND   KEYID = V_KEYID;

END 
/

CREATE PROCEDURE PUBLIC.TABLEKEY_SELECT_PK (IN V_SCHEMAID INTEGER,IN V_TABLEID INTEGER) SPECIFIC TABLEKEY_SELECT_PK_10152 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE RESULT CURSOR
FOR
SELECT SCHEMAID,
       TABLEID,
       KEYID,
       NAME,
       LABEL,
       ISPK,
       TYPEID,
       PRECISION,
       SCALE,
       ORDEN
FROM PUBLIC.TABLEKEY
WHERE SCHEMAID = V_SCHEMAID
AND   TABLEID = V_TABLEID
AND   ISPK = TRUE;

OPEN RESULT;

END 
/

CREATE PROCEDURE PUBLIC.TABLEKEY_SELECT_NPK (IN V_SCHEMAID INTEGER,IN V_TABLEID INTEGER) SPECIFIC TABLEKEY_SELECT_NPK_10154 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE RESULT CURSOR
FOR
SELECT SCHEMAID,
       TABLEID,
       KEYID,
       NAME,
       LABEL,
       ISPK,
       TYPEID,
       PRECISION,
       SCALE,
       ORDEN
FROM PUBLIC.TABLEKEY
WHERE SCHEMAID = V_SCHEMAID
AND   TABLEID = V_TABLEID
AND   ISPK = FALSE;

OPEN RESULT;

END 
/

CREATE PROCEDURE PUBLIC.KEYTYPE_INSERT (IN V_TYPEID INTEGER,IN V_NAME VARCHAR(300),IN V_PRECISIONREQUIRED BOOLEAN,IN V_SCALEREQUIRED BOOLEAN) SPECIFIC KEYTYPE_INSERT_10155 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC INSERT INTO PUBLIC.KEYTYPE
(
  TYPEID,
  NAME,
  PRECISIONREQUIRED,
  SCALEREQUIRED
)
VALUES
(
  V_TYPEID,
  V_NAME,
  V_PRECISIONREQUIRED,
  V_SCALEREQUIRED
);

END 
/

CREATE PROCEDURE PUBLIC.KEYTYPE_SELECT_ALL () SPECIFIC KEYTYPE_SELECT_ALL_10157 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE RESULT CURSOR
FOR
SELECT TYPEID,
       NAME,
       PRECISIONREQUIRED,
       SCALEREQUIRED
FROM PUBLIC.KEYTYPE;

OPEN RESULT;

END 
/

CREATE PROCEDURE PUBLIC.RELATIONSHIP_INSERT (IN V_SCHEMAID INTEGER,IN V_PARENT_TABLEID INTEGER,IN V_CHILD_TABLEID INTEGER,IN V_RELATIONSHIPTYPEID INTEGER,IN V_NAME VARCHAR(300),IN V_FORWARDVERBPHRASE VARCHAR(300),IN V_REVERSEVERBPHRASE VARCHAR(300)) SPECIFIC RELATIONSHIP_INSERT_10158 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC INSERT INTO PUBLIC.RELATIONSHIP
(
  SCHEMAID,
  PARENT_TABLEID,
  CHILD_TABLEID,
  RELATIONSHIPID,
  RELATIONSHIPTYPEID,
  NAME,
  FORWARDVERBPHRASE,
  REVERSEVERBPHRASE
)
VALUES
(
  V_SCHEMAID,
  V_PARENT_TABLEID,
  V_CHILD_TABLEID,
  DEFAULT,
  V_RELATIONSHIPTYPEID,
  V_NAME,
  V_FORWARDVERBPHRASE,
  V_REVERSEVERBPHRASE
);

END 
/

CREATE PROCEDURE PUBLIC.RELATIONSHIP_INSERT (OUT NEWID INTEGER,IN V_SCHEMAID INTEGER,IN V_PARENT_TABLEID INTEGER,IN V_CHILD_TABLEID INTEGER,IN V_RELATIONSHIPTYPEID INTEGER,IN V_NAME VARCHAR(300),IN V_FORWARDVERBPHRASE VARCHAR(300),IN V_REVERSEVERBPHRASE VARCHAR(300)) SPECIFIC RELATIONSHIP_INSERT_10324 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC INSERT INTO PUBLIC.RELATIONSHIP
(
  SCHEMAID,
  PARENT_TABLEID,
  CHILD_TABLEID,
  RELATIONSHIPID,
  RELATIONSHIPTYPEID,
  NAME,
  FORWARDVERBPHRASE,
  REVERSEVERBPHRASE
)
VALUES
(
  V_SCHEMAID,
  V_PARENT_TABLEID,
  V_CHILD_TABLEID,
  DEFAULT,
  V_RELATIONSHIPTYPEID,
  V_NAME,
  V_FORWARDVERBPHRASE,
  V_REVERSEVERBPHRASE
);

SET NEWID = IDENTITY();

END 
/

CREATE PROCEDURE PUBLIC.RELATIONSHIP_UPDATE (IN V_SCHEMAID INTEGER,IN V_PARENT_TABLEID INTEGER,IN V_CHILD_TABLEID INTEGER,IN V_RELATIONSHIPID INTEGER,IN V_RELATIONSHIPTYPEID INTEGER,IN V_NAME VARCHAR(300),IN V_FORWARDVERBPHRASE VARCHAR(300),IN V_REVERSEVERBPHRASE VARCHAR(300)) SPECIFIC RELATIONSHIP_UPDATE_10159 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC UPDATE PUBLIC.RELATIONSHIP
   SET RELATIONSHIPTYPEID = V_RELATIONSHIPTYPEID,
       NAME = V_NAME,
       FORWARDVERBPHRASE = V_FORWARDVERBPHRASE,
       REVERSEVERBPHRASE = V_REVERSEVERBPHRASE
WHERE SCHEMAID = V_SCHEMAID
AND   PARENT_TABLEID = V_PARENT_TABLEID
AND   CHILD_TABLEID = V_CHILD_TABLEID
AND   RELATIONSHIPID = V_RELATIONSHIPID;

END 
/

CREATE PROCEDURE PUBLIC.RELATIONSHIP_DELETE (IN V_SCHEMAID INTEGER,IN V_PARENT_TABLEID INTEGER,IN V_CHILD_TABLEID INTEGER,IN V_RELATIONSHIPID INTEGER) SPECIFIC RELATIONSHIP_DELETE_10160 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC DELETE
FROM PUBLIC.RELATIONSHIP
WHERE SCHEMAID = V_SCHEMAID
AND   PARENT_TABLEID = V_PARENT_TABLEID
AND   CHILD_TABLEID = V_CHILD_TABLEID
AND   RELATIONSHIPID = V_RELATIONSHIPID;

END 
/

CREATE PROCEDURE PUBLIC.RELATIONSHIP_MULTIPLE_SELECT (IN V_SCHEMAID INTEGER) SPECIFIC RELATIONSHIP_MULTIPLE_SELECT_10162 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE RESULT CURSOR
FOR
SELECT SCHEMAID,
       PARENT_TABLEID,
       B.NAME AS PARENT,
       CHILD_TABLEID,
       C.NAME AS CHILD,
       RELATIONSHIPTYPEID,
       RELATIONSHIPID,
       D.NAME AS RELATIONSHIPTYPENAME,
       A.NAME AS RELATIONSHIPNAME,
       A.FORWARDVERBPHRASE,
       A.REVERSEVERBPHRASE
FROM PUBLIC.RELATIONSHIP A,
     PUBLIC.DATABASETABLE B,
     PUBLIC.DATABASETABLE C,
     PUBLIC.RELATIONSHIPTYPE D
WHERE SCHEMAID = V_SCHEMAID
AND   A.SCHEMAID = B.SCHEMAID
AND   A.SCHEMAID = C.SCHEMAID
AND   A.PARENT_TABLEID = B.TABLEID
AND   A.CHILD_TABLEID = C.TABLEID
AND   A.RELATIONSHIPTYPEID = D.RELATIONSHIPTYPEID
ORDER BY PARENT,
         RELATIONSHIPTYPEID,
         CHILD;

OPEN RESULT;

END 
/

CREATE PROCEDURE PUBLIC.RELATIONSHIPTYPE_INSERT (IN V_RELATIONSHIPTYPEID INTEGER,IN V_NAME VARCHAR(300)) SPECIFIC RELATIONSHIPTYPE_INSERT_10163 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC INSERT INTO PUBLIC.RELATIONSHIPTYPE
(
  RELATIONSHIPTYPEID,
  NAME
)
VALUES
(
  V_RELATIONSHIPTYPEID,
  V_NAME
);

END 
/

CREATE PROCEDURE PUBLIC.RELATIONSHIPKEYPAIR_INSERT (IN V_SCHEMAID INTEGER,IN V_PARENT_TABLEID INTEGER,IN V_CHILD_TABLEID INTEGER,IN V_RELATIONSHIPID INTEGER,IN V_PARENT_KEYID INTEGER,IN V_CHILD_KEYID INTEGER) SPECIFIC RELATIONSHIPKEYPAIR_INSERT_10164 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC INSERT INTO PUBLIC.RELATIONSHIPKEYPAIR
(
  SCHEMAID,
  PARENT_TABLEID,
  CHILD_TABLEID,
  RELATIONSHIPID,
  PARENT_KEYID,
  CHILD_KEYID
)
VALUES
(
  V_SCHEMAID,
  V_PARENT_TABLEID,
  V_CHILD_TABLEID,
  V_RELATIONSHIPID,
  V_PARENT_KEYID,
  V_CHILD_KEYID
);

END 
/

CREATE PROCEDURE PUBLIC.RELATIONSHIPKEYPAIR_DELETE (IN V_SCHEMAID INTEGER,IN V_PARENT_TABLEID INTEGER,IN V_CHILD_TABLEID INTEGER,IN V_RELATIONSHIPID INTEGER,IN V_PARENT_KEYID INTEGER,IN V_CHILD_KEYID INTEGER) SPECIFIC RELATIONSHIPKEYPAIR_DELETE_10165 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC DELETE
FROM PUBLIC.RELATIONSHIPKEYPAIR
WHERE SCHEMAID = V_SCHEMAID
AND   PARENT_TABLEID = V_PARENT_TABLEID
AND   CHILD_TABLEID = V_CHILD_TABLEID
AND   RELATIONSHIPID = V_RELATIONSHIPID
AND   PARENT_KEYID = V_PARENT_KEYID
AND   CHILD_KEYID = V_CHILD_KEYID;

END 
/

CREATE PROCEDURE PUBLIC.RELATIONSHIPKEYPAIR_DELETE (IN V_SCHEMAID INTEGER,IN V_PARENT_TABLEID INTEGER,IN V_CHILD_TABLEID INTEGER,IN V_RELATIONSHIPID INTEGER) SPECIFIC RELATIONSHIPKEYPAIR_DELETE_10181 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC DELETE
FROM PUBLIC.RELATIONSHIPKEYPAIR
WHERE SCHEMAID = V_SCHEMAID
AND   PARENT_TABLEID = V_PARENT_TABLEID
AND   CHILD_TABLEID = V_CHILD_TABLEID
AND   RELATIONSHIPID = V_RELATIONSHIPID;

END 
/

CREATE PROCEDURE PUBLIC.TABLEKEY_KEYTYPE_SELECT (IN V_SCHEMAID INTEGER,IN V_TABLEID INTEGER) SPECIFIC TABLEKEY_KEYTYPE_SELECT_10167 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE RESULT CURSOR
FOR
SELECT SCHEMAID,
       TABLEID,
       KEYID,
       NAME,
       LABEL,
       ISPK,
       TYPEID,
       B.NAME AS TYPENAME,
       CASE B.NAME
         WHEN 'IDENTITY' THEN TRUE
         ELSE FALSE
       END AS ISIDENTITY,
       PRECISIONREQUIRED,
       PRECISION,
       SCALEREQUIRED,
       SCALE,
       ORDEN
FROM PUBLIC.TABLEKEY A,
     PUBLIC.KEYTYPE B
WHERE A.TYPEID = B.TYPEID
AND   SCHEMAID = V_SCHEMAID
AND   TABLEID = V_TABLEID
ORDER BY ORDEN,
         NAME;

OPEN RESULT;

END 
/

CREATE PROCEDURE PUBLIC.RELATIONSHIPKEYPAIR_MULTIPLE_SELECT (IN V_SCHEMAID INTEGER,IN V_PARENT_TABLEID INTEGER,IN V_CHILD_TABLEID INTEGER,IN V_RELATIONSHIPID INTEGER) SPECIFIC RELATIONSHIPKEYPAIR_MULTIPLE_SELECT_10169 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE RESULT CURSOR
FOR
SELECT SCHEMAID,
       PARENT_TABLEID,
       CHILD_TABLEID,
       RELATIONSHIPID,
       PARENT_KEYID,
       CHILD_KEYID,
       B.NAME AS PARENT,
       C.NAME AS CHILD
FROM PUBLIC.RELATIONSHIPKEYPAIR A,
     PUBLIC.TABLEKEY B,
     PUBLIC.TABLEKEY C
WHERE SCHEMAID = V_SCHEMAID
AND   PARENT_TABLEID = V_PARENT_TABLEID
AND   CHILD_TABLEID = V_CHILD_TABLEID
AND   RELATIONSHIPID = V_RELATIONSHIPID
AND   A.SCHEMAID = B.SCHEMAID
AND   A.PARENT_TABLEID = B.TABLEID
AND   A.PARENT_KEYID = B.KEYID
AND   A.SCHEMAID = C.SCHEMAID
AND   A.CHILD_TABLEID = C.TABLEID
AND   A.CHILD_KEYID = C.KEYID;

OPEN RESULT;

END 
/

CREATE PROCEDURE PUBLIC.DATABASETABLE_COPY (IN V_SCHEMAID_OLD INTEGER,IN V_SCHEMAID_NEW INTEGER) SPECIFIC DATABASETABLE_COPY_10179 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC INSERT INTO PUBLIC.DATABASETABLE
(
  SCHEMAID,
  TABLEID,
  NAME
)
SELECT V_SCHEMAID_NEW,
       TABLEID,
       NAME
FROM PUBLIC.DATABASETABLE
WHERE SCHEMAID = V_SCHEMAID_OLD;

END 
/

CREATE PROCEDURE PUBLIC.TABLEKEY_COPY (IN V_SCHEMAID INTEGER,IN V_TABLEID_OLD INTEGER,IN V_TABLEID_NEW INTEGER) SPECIFIC TABLEKEY_COPY_10181 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC INSERT INTO PUBLIC.TABLEKEY
(
  SCHEMAID,
  TABLEID,
  KEYID,
  NAME,
  LABEL,
  ISPK,
  TYPEID,
  PRECISION,
  SCALE,
  ORDEN
)
SELECT SCHEMAID,
       V_TABLEID_NEW,
       KEYID,
       NAME,
       LABEL,
       ISPK,
       TYPEID,
       PRECISION,
       SCALE,
       ORDEN
FROM PUBLIC.TABLEKEY
WHERE SCHEMAID = V_SCHEMAID
AND   TABLEID = V_TABLEID_OLD;

END 
/

CREATE PROCEDURE PUBLIC.TABLEKEY_COPY (IN V_SCHEMAID_OLD INTEGER,IN V_SCHEMAID_NEW INTEGER) SPECIFIC TABLEKEY_COPY_10185 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC INSERT INTO PUBLIC.TABLEKEY
(
  SCHEMAID,
  TABLEID,
  KEYID,
  NAME,
  LABEL,
  ISPK,
  TYPEID,
  PRECISION,
  SCALE,
  ORDEN
)
SELECT V_SCHEMAID_NEW,
       TABLEID,
       KEYID,
       NAME,
       LABEL,
       ISPK,
       TYPEID,
       PRECISION,
       SCALE,
       ORDEN
FROM PUBLIC.TABLEKEY
WHERE SCHEMAID = V_SCHEMAID_OLD;

END 
/

CREATE PROCEDURE PUBLIC.RELATIONSHIP_COPY (IN V_SCHEMAID_OLD INTEGER,IN V_SCHEMAID_NEW INTEGER) SPECIFIC RELATIONSHIP_COPY_10183 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC INSERT INTO PUBLIC.RELATIONSHIP
(
  SCHEMAID,
  PARENT_TABLEID,
  CHILD_TABLEID,
  RELATIONSHIPID,
  RELATIONSHIPTYPEID,
  NAME,
  FORWARDVERBPHRASE,
  REVERSEVERBPHRASE
)
SELECT V_SCHEMAID_NEW,
       PARENT_TABLEID,
       CHILD_TABLEID,
       RELATIONSHIPID,
       RELATIONSHIPTYPEID,
       NAME,
       FORWARDVERBPHRASE,
       REVERSEVERBPHRASE
FROM PUBLIC.RELATIONSHIP
WHERE SCHEMAID = V_SCHEMAID_OLD;

END 
/

CREATE PROCEDURE PUBLIC.RELATIONSHIPKEYPAIR_COPY (IN V_SCHEMAID_OLD INTEGER,IN V_SCHEMAID_NEW INTEGER) SPECIFIC RELATIONSHIPKEYPAIR_COPY_10187 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC INSERT INTO PUBLIC.RELATIONSHIPKEYPAIR
(
  SCHEMAID,
  PARENT_TABLEID,
  CHILD_TABLEID,
  RELATIONSHIPID,
  PARENT_KEYID,
  CHILD_KEYID
)
SELECT V_SCHEMAID_NEW,
       PARENT_TABLEID,
       CHILD_TABLEID,
       RELATIONSHIPID,
       PARENT_KEYID,
       CHILD_KEYID
FROM PUBLIC.RELATIONSHIPKEYPAIR
WHERE SCHEMAID = V_SCHEMAID_OLD;

END 
/

CREATE PROCEDURE PUBLIC.POTATOSQL_TABLE_COPY (IN V_SCHEMAID INTEGER,IN V_TABLEID_OLD INTEGER,IN V_TABLENAME VARCHAR(300)) SPECIFIC POTATOSQL_TABLE_COPY_10188 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC DECLARE V_TABLEID_NEW INTEGER;

CALL DATABASETABLE_INSERT (V_SCHEMAID,V_TABLEID_NEW,V_TABLENAME);

CALL TABLEKEY_COPY (V_SCHEMAID,V_TABLEID_OLD,V_TABLEID_NEW);

END 
/

CREATE PROCEDURE PUBLIC.DATABASESCHEMA_COPY (IN V_SCHEMAID_OLD INTEGER,IN V_SCHEMANAME_NEW VARCHAR(300)) SPECIFIC DATABASESCHEMA_COPY_10189 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC DECLARE V_SCHEMAID_NEW INTEGER;

CALL DATABASESCHEMA_INSERT (V_SCHEMAID_NEW,V_SCHEMANAME_NEW);

CALL DATABASETABLE_COPY (V_SCHEMAID_OLD,V_SCHEMAID_NEW);

CALL RELATIONSHIP_COPY (V_SCHEMAID_OLD,V_SCHEMAID_NEW);

CALL TABLEKEY_COPY (V_SCHEMAID_OLD,V_SCHEMAID_NEW);

CALL RELATIONSHIPKEYPAIR_COPY (V_SCHEMAID_OLD,V_SCHEMAID_NEW);

END 
/

CREATE PROCEDURE PUBLIC.RELATIONSHIP_SELECTONLYNAMES (IN V_SCHEMAID INTEGER) SPECIFIC RELATIONSHIP_SELECTONLYNAMES_10184 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE RESULT CURSOR
FOR
SELECT A.PARENT,
       A.CHILD,
       A.RELATIONSHIPID,
       A.RELATIONSHIPTYPEID,
       A.PARENT_KEY,
       A.CHILD_KEY
FROM (SELECT A.SCHEMAID,
             A.PARENT_TABLEID,
             A.CHILD_TABLEID,
             A.RELATIONSHIPID,
             A.RELATIONSHIPTYPEID,
             A.PARENT,
             A.CHILD,
             A.PARENT_KEYID,
             A.CHILD_KEYID,
             B.NAME AS PARENT_KEY,
             C.NAME AS CHILD_KEY
      FROM (SELECT A.SCHEMAID,
                   A.PARENT_TABLEID,
                   A.CHILD_TABLEID,
                   A.RELATIONSHIPID,
                   A.RELATIONSHIPTYPEID,
                   A.PARENT,
                   A.CHILD,
                   B.PARENT_KEYID,
                   B.CHILD_KEYID
            FROM (SELECT A.SCHEMAID,
                         A.PARENT_TABLEID,
                         A.CHILD_TABLEID,
                         A.RELATIONSHIPID,
                         A.RELATIONSHIPTYPEID,
                         B.NAME AS PARENT,
                         C.NAME AS CHILD
                  FROM PUBLIC.RELATIONSHIP A,
                       PUBLIC.DATABASETABLE B,
                       PUBLIC.DATABASETABLE C
                  WHERE A.SCHEMAID = B.SCHEMAID
                  AND   A.PARENT_TABLEID = B.TABLEID
                  AND   A.SCHEMAID = C.SCHEMAID
                  AND   A.CHILD_TABLEID = C.TABLEID
                  AND   A.SCHEMAID = V_SCHEMAID) A,
                 PUBLIC.RELATIONSHIPKEYPAIR B
            WHERE A.SCHEMAID = B.SCHEMAID
            AND   A.PARENT_TABLEID = B.PARENT_TABLEID
            AND   A.CHILD_TABLEID = B.CHILD_TABLEID
            AND   A.RELATIONSHIPID = B.RELATIONSHIPID) A,
           PUBLIC.TABLEKEY B,
           PUBLIC.TABLEKEY C
      WHERE A.SCHEMAID = B.SCHEMAID
      AND   A.PARENT_TABLEID = B.TABLEID
      AND   A.PARENT_KEYID = B.KEYID
      AND   A.SCHEMAID = C.SCHEMAID
      AND   A.CHILD_TABLEID = C.TABLEID
      AND   A.CHILD_KEYID = C.KEYID) A;

OPEN RESULT;

END 
/

CREATE PROCEDURE PUBLIC.POTATOSQL_TABLEKEY_COPY (IN V_SCHEMAID INTEGER,IN V_TABLEID INTEGER,IN V_KEYID INTEGER,IN V_NAME VARCHAR(300)) SPECIFIC POTATOSQL_TABLEKEY_COPY_10188 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC INSERT INTO PUBLIC.TABLEKEY
(
  SCHEMAID,
  TABLEID,
  NAME,
  LABEL,
  ISPK,
  TYPEID,
  PRECISION,
  SCALE,
  ORDEN
)
SELECT SCHEMAID,
       TABLEID,
       V_NAME,
       LABEL,
       ISPK,
       TYPEID,
       PRECISION,
       SCALE,
       ORDEN
FROM PUBLIC.TABLEKEY
WHERE SCHEMAID = V_SCHEMAID
AND   TABLEID = V_TABLEID
AND   KEYID = V_KEYID;

END 
/

CREATE PROCEDURE PUBLIC.RELATIONSHIP_MULTIPLE_SELECT_2 (
--
IN V_SCHEMAID INTEGER,
--
IN V_TABLEID INTEGER)
--
MODIFIES SQL DATA DYNAMIC RESULT SETS 1 BEGIN ATOMIC
--
DECLARE RESULT CURSOR
FOR
SELECT SCHEMAID,
       PARENT_TABLEID,
       B.NAME AS PARENT,
       CHILD_TABLEID,
       C.NAME AS CHILD,
       RELATIONSHIPTYPEID,
       RELATIONSHIPID,
       D.NAME AS RELATIONSHIPTYPENAME,
       A.NAME AS RELATIONSHIPNAME,
       A.FORWARDVERBPHRASE,
       A.REVERSEVERBPHRASE
FROM PUBLIC.RELATIONSHIP A,
     PUBLIC.DATABASETABLE B,
     PUBLIC.DATABASETABLE C,
     PUBLIC.RELATIONSHIPTYPE D
WHERE SCHEMAID = V_SCHEMAID
AND   A.PARENT_TABLEID = V_TABLEID
AND   A.SCHEMAID = B.SCHEMAID
AND   A.SCHEMAID = C.SCHEMAID
AND   A.PARENT_TABLEID = B.TABLEID
AND   A.CHILD_TABLEID = C.TABLEID
AND   A.RELATIONSHIPTYPEID = D.RELATIONSHIPTYPEID
ORDER BY PARENT,
         RELATIONSHIPTYPEID,
         CHILD;

--
OPEN RESULT;

--
END;
/
