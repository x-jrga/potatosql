SET DATABASE UNIQUE NAME HSQLDB6A6FB412A8
SET DATABASE GC 0
SET DATABASE DEFAULT RESULT MEMORY ROWS 0
SET DATABASE EVENT LOG LEVEL 0
SET DATABASE TRANSACTION CONTROL LOCKS
SET DATABASE DEFAULT ISOLATION LEVEL READ COMMITTED
SET DATABASE TRANSACTION ROLLBACK ON CONFLICT TRUE
SET DATABASE TEXT TABLE DEFAULTS ''
SET DATABASE SQL NAMES FALSE
SET DATABASE SQL REFERENCES FALSE
SET DATABASE SQL SIZE TRUE
SET DATABASE SQL TYPES FALSE
SET DATABASE SQL TDC DELETE TRUE
SET DATABASE SQL TDC UPDATE TRUE
SET DATABASE SQL CONCAT NULLS TRUE
SET DATABASE SQL UNIQUE NULLS TRUE
SET DATABASE SQL CONVERT TRUNCATE TRUE
SET DATABASE SQL AVG SCALE 0
SET DATABASE SQL DOUBLE NAN TRUE
SET FILES WRITE DELAY 500 MILLIS
SET FILES BACKUP INCREMENT TRUE
SET FILES CACHE SIZE 10000
SET FILES CACHE ROWS 50000
SET FILES SCALE 32
SET FILES LOB SCALE 32
SET FILES DEFRAG 0
SET FILES NIO TRUE
SET FILES NIO SIZE 256
SET FILES LOG TRUE
SET FILES LOG SIZE 50
SET FILES CHECK 8564
SET DATABASE COLLATION "SQL_TEXT" PAD SPACE
CREATE USER SA PASSWORD DIGEST 'd41d8cd98f00b204e9800998ecf8427e'
ALTER USER SA SET LOCAL TRUE
CREATE SCHEMA PUBLIC AUTHORIZATION DBA
CREATE MEMORY TABLE PUBLIC.DATABASESCHEMA(SCHEMAID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL,NAME VARCHAR(16777216),CONSTRAINT DATABASESCHEMA_PRIMARYKEY PRIMARY KEY(SCHEMAID))
ALTER TABLE PUBLIC.DATABASESCHEMA ALTER COLUMN SCHEMAID RESTART WITH 3
CREATE MEMORY TABLE PUBLIC.DATABASETABLE(SCHEMAID INTEGER,TABLEID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL,NAME VARCHAR(16777216),CONSTRAINT DATABASETABLE_PRIMARYKEY PRIMARY KEY(SCHEMAID,TABLEID),CONSTRAINT DATABASESCHEMA_DATABASETABLE_RELATIONSHIP FOREIGN KEY(SCHEMAID) REFERENCES PUBLIC.DATABASESCHEMA(SCHEMAID) ON DELETE CASCADE)
ALTER TABLE PUBLIC.DATABASETABLE ALTER COLUMN TABLEID RESTART WITH 10
CREATE MEMORY TABLE PUBLIC.TABLEKEY(SCHEMAID INTEGER,TABLEID INTEGER,KEYID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL,NAME VARCHAR(16777216),LABEL VARCHAR(16777216),ISPK BOOLEAN,TYPEID INTEGER,PRECISION INTEGER,SCALE INTEGER,ORDEN INTEGER,CONSTRAINT TABLEKEY_PRIMARYKEY PRIMARY KEY(SCHEMAID,TABLEID,KEYID),CONSTRAINT DATABASETABLE_TABLEKEY_RELATIONSHIP FOREIGN KEY(SCHEMAID,TABLEID) REFERENCES PUBLIC.DATABASETABLE(SCHEMAID,TABLEID) ON DELETE CASCADE)
ALTER TABLE PUBLIC.TABLEKEY ALTER COLUMN KEYID RESTART WITH 32
CREATE MEMORY TABLE PUBLIC.KEYTYPE(TYPEID INTEGER,NAME VARCHAR(16777216),PRECISIONREQUIRED BOOLEAN,SCALEREQUIRED BOOLEAN,CONSTRAINT KEYTYPE_PRIMARYKEY PRIMARY KEY(TYPEID))
CREATE MEMORY TABLE PUBLIC.RELATIONSHIPTYPE(RELATIONSHIPTYPEID INTEGER,NAME VARCHAR(16777216),CONSTRAINT RELATIONSHIPTYPE_PRIMARYKEY PRIMARY KEY(RELATIONSHIPTYPEID))
CREATE MEMORY TABLE PUBLIC.RELATIONSHIP(SCHEMAID INTEGER,PARENT_TABLEID INTEGER,CHILD_TABLEID INTEGER,RELATIONSHIPID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL,RELATIONSHIPTYPEID INTEGER,CONSTRAINT RELATIONSHIP_PRIMARYKEY PRIMARY KEY(SCHEMAID,PARENT_TABLEID,CHILD_TABLEID,RELATIONSHIPID),CONSTRAINT RELATIONSHIPTYPE_RELATIONSHIP_RELATIONSHIP FOREIGN KEY(RELATIONSHIPTYPEID) REFERENCES PUBLIC.RELATIONSHIPTYPE(RELATIONSHIPTYPEID) ON DELETE CASCADE)
ALTER TABLE PUBLIC.RELATIONSHIP ALTER COLUMN RELATIONSHIPID RESTART WITH 7
CREATE MEMORY TABLE PUBLIC.RELATIONSHIPKEYPAIR(SCHEMAID INTEGER,PARENT_TABLEID INTEGER,CHILD_TABLEID INTEGER,RELATIONSHIPID INTEGER,PARENT_KEYID INTEGER,CHILD_KEYID INTEGER,CONSTRAINT RELATIONSHIPKEYPAIR_PRIMARYKEY PRIMARY KEY(SCHEMAID,PARENT_TABLEID,CHILD_TABLEID,RELATIONSHIPID,PARENT_KEYID,CHILD_KEYID),CONSTRAINT TABLEKEY_RELATIONSHIPKEYPAIR_RELATIONSHIP_1 FOREIGN KEY(SCHEMAID,PARENT_TABLEID,PARENT_KEYID) REFERENCES PUBLIC.TABLEKEY(SCHEMAID,TABLEID,KEYID) ON DELETE CASCADE,CONSTRAINT TABLEKEY_RELATIONSHIPKEYPAIR_RELATIONSHIP_2 FOREIGN KEY(SCHEMAID,CHILD_TABLEID,CHILD_KEYID) REFERENCES PUBLIC.TABLEKEY(SCHEMAID,TABLEID,KEYID) ON DELETE CASCADE,CONSTRAINT RELATIONSHIP_RELATIONSHIPKEYPAIR_RELATIONSHIP FOREIGN KEY(SCHEMAID,PARENT_TABLEID,CHILD_TABLEID,RELATIONSHIPID) REFERENCES PUBLIC.RELATIONSHIP(SCHEMAID,PARENT_TABLEID,CHILD_TABLEID,RELATIONSHIPID) ON DELETE CASCADE)
CREATE PROCEDURE PUBLIC.DATABASESCHEMA_INSERT(IN V_NAME VARCHAR(16777216)) SPECIFIC DATABASESCHEMA_INSERT_10219 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC INSERT INTO PUBLIC.DATABASESCHEMA(SCHEMAID,NAME)VALUES(DEFAULT,V_NAME);END
CREATE PROCEDURE PUBLIC.DATABASESCHEMA_INSERT(OUT NEWID INTEGER,IN V_NAME VARCHAR(16777216)) SPECIFIC DATABASESCHEMA_INSERT_10306 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC INSERT INTO PUBLIC.DATABASESCHEMA(SCHEMAID,NAME)VALUES(DEFAULT,V_NAME);SET NEWID=IDENTITY();END
CREATE PROCEDURE PUBLIC.DATABASESCHEMA_UPDATE(IN V_SCHEMAID INTEGER,IN V_NAME VARCHAR(16777216)) SPECIFIC DATABASESCHEMA_UPDATE_10220 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC UPDATE PUBLIC.DATABASESCHEMA SET NAME=V_NAME WHERE SCHEMAID=V_SCHEMAID;END
CREATE PROCEDURE PUBLIC.DATABASESCHEMA_DELETE(IN V_SCHEMAID INTEGER) SPECIFIC DATABASESCHEMA_DELETE_10221 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC DELETE FROM PUBLIC.DATABASESCHEMA WHERE SCHEMAID=V_SCHEMAID;END
CREATE PROCEDURE PUBLIC.DATABASESCHEMA_MERGE(IN V_SCHEMAID INTEGER,IN V_NAME VARCHAR(16777216)) SPECIFIC DATABASESCHEMA_MERGE_10223 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC MERGE INTO PUBLIC.DATABASESCHEMA USING(VALUES(V_SCHEMAID,V_NAME))ON(SCHEMAID=V_SCHEMAID)WHEN MATCHED THEN UPDATE SET NAME=V_NAME WHEN NOT MATCHED THEN INSERT VALUES V_SCHEMAID,V_NAME;END
CREATE PROCEDURE PUBLIC.DATABASESCHEMA_SELECT(IN V_SCHEMAID INTEGER) SPECIFIC DATABASESCHEMA_SELECT_10225 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL  DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE RESULT CURSOR FOR SELECT SCHEMAID,NAME FROM PUBLIC.DATABASESCHEMA WHERE SCHEMAID=V_SCHEMAID;OPEN RESULT;END
CREATE PROCEDURE PUBLIC.DATABASESCHEMA_DELETE_ALL() SPECIFIC DATABASESCHEMA_DELETE_ALL_10226 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC DELETE FROM PUBLIC.DATABASESCHEMA;END
CREATE PROCEDURE PUBLIC.DATABASESCHEMA_SELECT_ALL() SPECIFIC DATABASESCHEMA_SELECT_ALL_10228 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL  DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE RESULT CURSOR FOR SELECT SCHEMAID,NAME FROM PUBLIC.DATABASESCHEMA;OPEN RESULT;END
CREATE PROCEDURE PUBLIC.DATABASETABLE_INSERT(IN V_SCHEMAID INTEGER,IN V_NAME VARCHAR(16777216)) SPECIFIC DATABASETABLE_INSERT_10229 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC INSERT INTO PUBLIC.DATABASETABLE(SCHEMAID,TABLEID,NAME)VALUES(V_SCHEMAID,DEFAULT,V_NAME);END
CREATE PROCEDURE PUBLIC.DATABASETABLE_INSERT(IN V_SCHEMAID INTEGER,OUT NEWID INTEGER,IN V_NAME VARCHAR(16777216)) SPECIFIC DATABASETABLE_INSERT_10230 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC INSERT INTO PUBLIC.DATABASETABLE(SCHEMAID,TABLEID,NAME)VALUES(V_SCHEMAID,DEFAULT,V_NAME);SET NEWID=IDENTITY();END
CREATE PROCEDURE PUBLIC.DATABASETABLE_UPDATE(IN V_SCHEMAID INTEGER,IN V_TABLEID INTEGER,IN V_NAME VARCHAR(16777216)) SPECIFIC DATABASETABLE_UPDATE_10231 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC UPDATE PUBLIC.DATABASETABLE SET NAME=V_NAME WHERE SCHEMAID=V_SCHEMAID AND TABLEID=V_TABLEID;END
CREATE PROCEDURE PUBLIC.DATABASETABLE_DELETE(IN V_SCHEMAID INTEGER,IN V_TABLEID INTEGER) SPECIFIC DATABASETABLE_DELETE_10232 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC DELETE FROM PUBLIC.DATABASETABLE WHERE SCHEMAID=V_SCHEMAID AND TABLEID=V_TABLEID;END
CREATE PROCEDURE PUBLIC.DATABASETABLE_MERGE(IN V_SCHEMAID INTEGER,IN V_TABLEID INTEGER,IN V_NAME VARCHAR(16777216)) SPECIFIC DATABASETABLE_MERGE_10234 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC MERGE INTO PUBLIC.DATABASETABLE USING(VALUES(V_SCHEMAID,V_TABLEID,V_NAME))ON(SCHEMAID=V_SCHEMAID AND TABLEID=V_TABLEID)WHEN MATCHED THEN UPDATE SET NAME=V_NAME WHEN NOT MATCHED THEN INSERT VALUES V_SCHEMAID,V_TABLEID,V_NAME;END
CREATE PROCEDURE PUBLIC.DATABASETABLE_SELECT(IN V_SCHEMAID INTEGER) SPECIFIC DATABASETABLE_SELECT_10236 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL  DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE RESULT CURSOR FOR SELECT SCHEMAID,TABLEID,NAME FROM PUBLIC.DATABASETABLE WHERE SCHEMAID=V_SCHEMAID;OPEN RESULT;END
CREATE PROCEDURE PUBLIC.DATABASETABLE_SELECT(IN V_SCHEMAID INTEGER,IN V_TABLEID INTEGER) SPECIFIC DATABASETABLE_SELECT_10238 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL  DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE RESULT CURSOR FOR SELECT SCHEMAID,TABLEID,NAME FROM PUBLIC.DATABASETABLE WHERE SCHEMAID=V_SCHEMAID AND TABLEID=V_TABLEID;OPEN RESULT;END
CREATE PROCEDURE PUBLIC.DATABASETABLE_DELETE_ALL() SPECIFIC DATABASETABLE_DELETE_ALL_10239 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC DELETE FROM PUBLIC.DATABASETABLE;END
CREATE PROCEDURE PUBLIC.DATABASETABLE_SELECT_ALL() SPECIFIC DATABASETABLE_SELECT_ALL_10241 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL  DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE RESULT CURSOR FOR SELECT SCHEMAID,TABLEID,NAME FROM PUBLIC.DATABASETABLE;OPEN RESULT;END
CREATE PROCEDURE PUBLIC.TABLEKEY_INSERT(IN V_SCHEMAID INTEGER,IN V_TABLEID INTEGER,IN V_NAME VARCHAR(16777216),IN V_LABEL VARCHAR(16777216),IN V_ISPK BOOLEAN,IN V_TYPEID INTEGER,IN V_PRECISION INTEGER,IN V_SCALE INTEGER,IN V_ORDEN INTEGER) SPECIFIC TABLEKEY_INSERT_10242 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC INSERT INTO PUBLIC.TABLEKEY(SCHEMAID,TABLEID,KEYID,NAME,LABEL,ISPK,TYPEID,PRECISION,SCALE,ORDEN)VALUES(V_SCHEMAID,V_TABLEID,DEFAULT,V_NAME,V_LABEL,V_ISPK,V_TYPEID,V_PRECISION,V_SCALE,V_ORDEN);END
CREATE PROCEDURE PUBLIC.TABLEKEY_UPDATE(IN V_SCHEMAID INTEGER,IN V_TABLEID INTEGER,IN V_KEYID INTEGER,IN V_NAME VARCHAR(16777216),IN V_LABEL VARCHAR(16777216),IN V_ISPK BOOLEAN,IN V_TYPEID INTEGER,IN V_PRECISION INTEGER,IN V_SCALE INTEGER,IN V_ORDEN INTEGER) SPECIFIC TABLEKEY_UPDATE_10243 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC UPDATE PUBLIC.TABLEKEY SET NAME=V_NAME,LABEL=V_LABEL,ISPK=V_ISPK,TYPEID=V_TYPEID,PRECISION=V_PRECISION,SCALE=V_SCALE,ORDEN=V_ORDEN WHERE SCHEMAID=V_SCHEMAID AND TABLEID=V_TABLEID AND KEYID=V_KEYID;END
CREATE PROCEDURE PUBLIC.TABLEKEY_DELETE(IN V_SCHEMAID INTEGER,IN V_TABLEID INTEGER,IN V_KEYID INTEGER) SPECIFIC TABLEKEY_DELETE_10244 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC DELETE FROM PUBLIC.TABLEKEY WHERE SCHEMAID=V_SCHEMAID AND TABLEID=V_TABLEID AND KEYID=V_KEYID;END
CREATE PROCEDURE PUBLIC.TABLEKEY_MERGE(IN V_SCHEMAID INTEGER,IN V_TABLEID INTEGER,IN V_KEYID INTEGER,IN V_NAME VARCHAR(16777216),IN V_LABEL VARCHAR(16777216),IN V_ISPK BOOLEAN,IN V_TYPEID INTEGER,IN V_PRECISION INTEGER,IN V_SCALE INTEGER,IN V_ORDEN INTEGER) SPECIFIC TABLEKEY_MERGE_10246 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC MERGE INTO PUBLIC.TABLEKEY USING(VALUES(V_SCHEMAID,V_TABLEID,V_KEYID,V_NAME,V_LABEL,V_ISPK,V_TYPEID,V_PRECISION,V_SCALE,V_ORDEN))ON(SCHEMAID=V_SCHEMAID AND TABLEID=V_TABLEID AND KEYID=V_KEYID)WHEN MATCHED THEN UPDATE SET NAME=V_NAME,LABEL=V_LABEL,ISPK=V_ISPK,TYPEID=V_TYPEID,PRECISION=V_PRECISION,SCALE=V_SCALE,ORDEN=V_ORDEN WHEN NOT MATCHED THEN INSERT VALUES V_SCHEMAID,V_TABLEID,V_KEYID,V_NAME,V_LABEL,V_ISPK,V_TYPEID,V_PRECISION,V_SCALE,V_ORDEN;END
CREATE PROCEDURE PUBLIC.TABLEKEY_SELECT(IN V_SCHEMAID INTEGER,IN V_TABLEID INTEGER,IN V_KEYID INTEGER) SPECIFIC TABLEKEY_SELECT_10248 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL  DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE RESULT CURSOR FOR SELECT SCHEMAID,TABLEID,KEYID,NAME,LABEL,ISPK,TYPEID,PRECISION,SCALE,ORDEN FROM PUBLIC.TABLEKEY WHERE SCHEMAID=V_SCHEMAID AND TABLEID=V_TABLEID AND KEYID=V_KEYID;OPEN RESULT;END
CREATE PROCEDURE PUBLIC.TABLEKEY_DELETE_ALL() SPECIFIC TABLEKEY_DELETE_ALL_10249 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC DELETE FROM PUBLIC.TABLEKEY;END
CREATE PROCEDURE PUBLIC.TABLEKEY_SELECT_ALL() SPECIFIC TABLEKEY_SELECT_ALL_10251 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL  DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE RESULT CURSOR FOR SELECT SCHEMAID,TABLEID,KEYID,NAME,LABEL,ISPK,TYPEID,PRECISION,SCALE,ORDEN FROM PUBLIC.TABLEKEY;OPEN RESULT;END
CREATE PROCEDURE PUBLIC.KEYTYPE_INSERT(IN V_TYPEID INTEGER,IN V_NAME VARCHAR(16777216),IN V_PRECISIONREQUIRED BOOLEAN,IN V_SCALEREQUIRED BOOLEAN) SPECIFIC KEYTYPE_INSERT_10252 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC INSERT INTO PUBLIC.KEYTYPE(TYPEID,NAME,PRECISIONREQUIRED,SCALEREQUIRED)VALUES(V_TYPEID,V_NAME,V_PRECISIONREQUIRED,V_SCALEREQUIRED);END
CREATE PROCEDURE PUBLIC.KEYTYPE_UPDATE(IN V_TYPEID INTEGER,IN V_NAME VARCHAR(16777216),IN V_PRECISIONREQUIRED BOOLEAN,IN V_SCALEREQUIRED BOOLEAN) SPECIFIC KEYTYPE_UPDATE_10253 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC UPDATE PUBLIC.KEYTYPE SET NAME=V_NAME,PRECISIONREQUIRED=V_PRECISIONREQUIRED,SCALEREQUIRED=V_SCALEREQUIRED WHERE TYPEID=V_TYPEID;END
CREATE PROCEDURE PUBLIC.KEYTYPE_DELETE(IN V_TYPEID INTEGER) SPECIFIC KEYTYPE_DELETE_10254 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC DELETE FROM PUBLIC.KEYTYPE WHERE TYPEID=V_TYPEID;END
CREATE PROCEDURE PUBLIC.KEYTYPE_MERGE(IN V_TYPEID INTEGER,IN V_NAME VARCHAR(16777216),IN V_PRECISIONREQUIRED BOOLEAN,IN V_SCALEREQUIRED BOOLEAN) SPECIFIC KEYTYPE_MERGE_10256 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC MERGE INTO PUBLIC.KEYTYPE USING(VALUES(V_TYPEID,V_NAME,V_PRECISIONREQUIRED,V_SCALEREQUIRED))ON(TYPEID=V_TYPEID)WHEN MATCHED THEN UPDATE SET NAME=V_NAME,PRECISIONREQUIRED=V_PRECISIONREQUIRED,SCALEREQUIRED=V_SCALEREQUIRED WHEN NOT MATCHED THEN INSERT VALUES V_TYPEID,V_NAME,V_PRECISIONREQUIRED,V_SCALEREQUIRED;END
CREATE PROCEDURE PUBLIC.KEYTYPE_SELECT(IN V_TYPEID INTEGER) SPECIFIC KEYTYPE_SELECT_10258 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL  DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE RESULT CURSOR FOR SELECT TYPEID,NAME,PRECISIONREQUIRED,SCALEREQUIRED FROM PUBLIC.KEYTYPE WHERE TYPEID=V_TYPEID;OPEN RESULT;END
CREATE PROCEDURE PUBLIC.KEYTYPE_DELETE_ALL() SPECIFIC KEYTYPE_DELETE_ALL_10259 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC DELETE FROM PUBLIC.KEYTYPE;END
CREATE PROCEDURE PUBLIC.KEYTYPE_SELECT_ALL() SPECIFIC KEYTYPE_SELECT_ALL_10261 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL  DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE RESULT CURSOR FOR SELECT TYPEID,NAME,PRECISIONREQUIRED,SCALEREQUIRED FROM PUBLIC.KEYTYPE;OPEN RESULT;END
CREATE PROCEDURE PUBLIC.RELATIONSHIPTYPE_INSERT(IN V_RELATIONSHIPTYPEID INTEGER,IN V_NAME VARCHAR(16777216)) SPECIFIC RELATIONSHIPTYPE_INSERT_10262 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC INSERT INTO PUBLIC.RELATIONSHIPTYPE(RELATIONSHIPTYPEID,NAME)VALUES(V_RELATIONSHIPTYPEID,V_NAME);END
CREATE PROCEDURE PUBLIC.RELATIONSHIPTYPE_UPDATE(IN V_RELATIONSHIPTYPEID INTEGER,IN V_NAME VARCHAR(16777216)) SPECIFIC RELATIONSHIPTYPE_UPDATE_10263 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC UPDATE PUBLIC.RELATIONSHIPTYPE SET NAME=V_NAME WHERE RELATIONSHIPTYPEID=V_RELATIONSHIPTYPEID;END
CREATE PROCEDURE PUBLIC.RELATIONSHIPTYPE_DELETE(IN V_RELATIONSHIPTYPEID INTEGER) SPECIFIC RELATIONSHIPTYPE_DELETE_10264 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC DELETE FROM PUBLIC.RELATIONSHIPTYPE WHERE RELATIONSHIPTYPEID=V_RELATIONSHIPTYPEID;END
CREATE PROCEDURE PUBLIC.RELATIONSHIPTYPE_MERGE(IN V_RELATIONSHIPTYPEID INTEGER,IN V_NAME VARCHAR(16777216)) SPECIFIC RELATIONSHIPTYPE_MERGE_10266 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC MERGE INTO PUBLIC.RELATIONSHIPTYPE USING(VALUES(V_RELATIONSHIPTYPEID,V_NAME))ON(RELATIONSHIPTYPEID=V_RELATIONSHIPTYPEID)WHEN MATCHED THEN UPDATE SET NAME=V_NAME WHEN NOT MATCHED THEN INSERT VALUES V_RELATIONSHIPTYPEID,V_NAME;END
CREATE PROCEDURE PUBLIC.RELATIONSHIPTYPE_SELECT(IN V_RELATIONSHIPTYPEID INTEGER) SPECIFIC RELATIONSHIPTYPE_SELECT_10268 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL  DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE RESULT CURSOR FOR SELECT RELATIONSHIPTYPEID,NAME FROM PUBLIC.RELATIONSHIPTYPE WHERE RELATIONSHIPTYPEID=V_RELATIONSHIPTYPEID;OPEN RESULT;END
CREATE PROCEDURE PUBLIC.RELATIONSHIPTYPE_DELETE_ALL() SPECIFIC RELATIONSHIPTYPE_DELETE_ALL_10269 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC DELETE FROM PUBLIC.RELATIONSHIPTYPE;END
CREATE PROCEDURE PUBLIC.RELATIONSHIPTYPE_SELECT_ALL() SPECIFIC RELATIONSHIPTYPE_SELECT_ALL_10271 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL  DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE RESULT CURSOR FOR SELECT RELATIONSHIPTYPEID,NAME FROM PUBLIC.RELATIONSHIPTYPE;OPEN RESULT;END
CREATE PROCEDURE PUBLIC.RELATIONSHIP_INSERT(IN V_SCHEMAID INTEGER,IN V_PARENT_TABLEID INTEGER,IN V_CHILD_TABLEID INTEGER,IN V_RELATIONSHIPTYPEID INTEGER) SPECIFIC RELATIONSHIP_INSERT_10272 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC INSERT INTO PUBLIC.RELATIONSHIP(SCHEMAID,PARENT_TABLEID,CHILD_TABLEID,RELATIONSHIPID,RELATIONSHIPTYPEID)VALUES(V_SCHEMAID,V_PARENT_TABLEID,V_CHILD_TABLEID,DEFAULT,V_RELATIONSHIPTYPEID);END
CREATE PROCEDURE PUBLIC.RELATIONSHIP_UPDATE(IN V_SCHEMAID INTEGER,IN V_PARENT_TABLEID INTEGER,IN V_CHILD_TABLEID INTEGER,IN V_RELATIONSHIPID INTEGER,IN V_RELATIONSHIPTYPEID INTEGER) SPECIFIC RELATIONSHIP_UPDATE_10273 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC UPDATE PUBLIC.RELATIONSHIP SET RELATIONSHIPTYPEID=V_RELATIONSHIPTYPEID WHERE SCHEMAID=V_SCHEMAID AND PARENT_TABLEID=V_PARENT_TABLEID AND CHILD_TABLEID=V_CHILD_TABLEID AND RELATIONSHIPID=V_RELATIONSHIPID;END
CREATE PROCEDURE PUBLIC.RELATIONSHIP_DELETE(IN V_SCHEMAID INTEGER,IN V_PARENT_TABLEID INTEGER,IN V_CHILD_TABLEID INTEGER,IN V_RELATIONSHIPID INTEGER) SPECIFIC RELATIONSHIP_DELETE_10274 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC DELETE FROM PUBLIC.RELATIONSHIP WHERE SCHEMAID=V_SCHEMAID AND PARENT_TABLEID=V_PARENT_TABLEID AND CHILD_TABLEID=V_CHILD_TABLEID AND RELATIONSHIPID=V_RELATIONSHIPID;END
CREATE PROCEDURE PUBLIC.RELATIONSHIP_MERGE(IN V_SCHEMAID INTEGER,IN V_PARENT_TABLEID INTEGER,IN V_CHILD_TABLEID INTEGER,IN V_RELATIONSHIPID INTEGER,IN V_RELATIONSHIPTYPEID INTEGER) SPECIFIC RELATIONSHIP_MERGE_10276 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC MERGE INTO PUBLIC.RELATIONSHIP USING(VALUES(V_SCHEMAID,V_PARENT_TABLEID,V_CHILD_TABLEID,V_RELATIONSHIPID,V_RELATIONSHIPTYPEID))ON(SCHEMAID=V_SCHEMAID AND PARENT_TABLEID=V_PARENT_TABLEID AND CHILD_TABLEID=V_CHILD_TABLEID AND RELATIONSHIPID=V_RELATIONSHIPID)WHEN MATCHED THEN UPDATE SET RELATIONSHIPTYPEID=V_RELATIONSHIPTYPEID WHEN NOT MATCHED THEN INSERT VALUES V_SCHEMAID,V_PARENT_TABLEID,V_CHILD_TABLEID,V_RELATIONSHIPID,V_RELATIONSHIPTYPEID;END
CREATE PROCEDURE PUBLIC.RELATIONSHIP_SELECT(IN V_SCHEMAID INTEGER,IN V_PARENT_TABLEID INTEGER,IN V_CHILD_TABLEID INTEGER,IN V_RELATIONSHIPID INTEGER) SPECIFIC RELATIONSHIP_SELECT_10278 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL  DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE RESULT CURSOR FOR SELECT SCHEMAID,PARENT_TABLEID,CHILD_TABLEID,RELATIONSHIPID,RELATIONSHIPTYPEID FROM PUBLIC.RELATIONSHIP WHERE SCHEMAID=V_SCHEMAID AND PARENT_TABLEID=V_PARENT_TABLEID AND CHILD_TABLEID=V_CHILD_TABLEID AND RELATIONSHIPID=V_RELATIONSHIPID;OPEN RESULT;END
CREATE PROCEDURE PUBLIC.RELATIONSHIP_DELETE_ALL() SPECIFIC RELATIONSHIP_DELETE_ALL_10279 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC DELETE FROM PUBLIC.RELATIONSHIP;END
CREATE PROCEDURE PUBLIC.RELATIONSHIP_SELECT_ALL() SPECIFIC RELATIONSHIP_SELECT_ALL_10281 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL  DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE RESULT CURSOR FOR SELECT SCHEMAID,PARENT_TABLEID,CHILD_TABLEID,RELATIONSHIPID,RELATIONSHIPTYPEID FROM PUBLIC.RELATIONSHIP;OPEN RESULT;END
CREATE PROCEDURE PUBLIC.RELATIONSHIPKEYPAIR_INSERT(IN V_SCHEMAID INTEGER,IN V_PARENT_TABLEID INTEGER,IN V_CHILD_TABLEID INTEGER,IN V_RELATIONSHIPID INTEGER,IN V_PARENT_KEYID INTEGER,IN V_CHILD_KEYID INTEGER) SPECIFIC RELATIONSHIPKEYPAIR_INSERT_10282 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC INSERT INTO PUBLIC.RELATIONSHIPKEYPAIR(SCHEMAID,PARENT_TABLEID,CHILD_TABLEID,RELATIONSHIPID,PARENT_KEYID,CHILD_KEYID)VALUES(V_SCHEMAID,V_PARENT_TABLEID,V_CHILD_TABLEID,V_RELATIONSHIPID,V_PARENT_KEYID,V_CHILD_KEYID);END
CREATE PROCEDURE PUBLIC.RELATIONSHIPKEYPAIR_DELETE(IN V_SCHEMAID INTEGER,IN V_PARENT_TABLEID INTEGER,IN V_CHILD_TABLEID INTEGER,IN V_RELATIONSHIPID INTEGER,IN V_PARENT_KEYID INTEGER,IN V_CHILD_KEYID INTEGER) SPECIFIC RELATIONSHIPKEYPAIR_DELETE_10283 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC DELETE FROM PUBLIC.RELATIONSHIPKEYPAIR WHERE SCHEMAID=V_SCHEMAID AND PARENT_TABLEID=V_PARENT_TABLEID AND CHILD_TABLEID=V_CHILD_TABLEID AND RELATIONSHIPID=V_RELATIONSHIPID AND PARENT_KEYID=V_PARENT_KEYID AND CHILD_KEYID=V_CHILD_KEYID;END
CREATE PROCEDURE PUBLIC.RELATIONSHIPKEYPAIR_SELECT(IN V_SCHEMAID INTEGER,IN V_PARENT_TABLEID INTEGER,IN V_CHILD_TABLEID INTEGER,IN V_RELATIONSHIPID INTEGER,IN V_PARENT_KEYID INTEGER,IN V_CHILD_KEYID INTEGER) SPECIFIC RELATIONSHIPKEYPAIR_SELECT_10285 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL  DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE RESULT CURSOR FOR SELECT SCHEMAID,PARENT_TABLEID,CHILD_TABLEID,RELATIONSHIPID,PARENT_KEYID,CHILD_KEYID FROM PUBLIC.RELATIONSHIPKEYPAIR WHERE SCHEMAID=V_SCHEMAID AND PARENT_TABLEID=V_PARENT_TABLEID AND CHILD_TABLEID=V_CHILD_TABLEID AND RELATIONSHIPID=V_RELATIONSHIPID AND PARENT_KEYID=V_PARENT_KEYID AND CHILD_KEYID=V_CHILD_KEYID;OPEN RESULT;END
CREATE PROCEDURE PUBLIC.RELATIONSHIPKEYPAIR_DELETE_ALL() SPECIFIC RELATIONSHIPKEYPAIR_DELETE_ALL_10286 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC DELETE FROM PUBLIC.RELATIONSHIPKEYPAIR;END
CREATE PROCEDURE PUBLIC.RELATIONSHIPKEYPAIR_SELECT_ALL() SPECIFIC RELATIONSHIPKEYPAIR_SELECT_ALL_10288 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL  DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE RESULT CURSOR FOR SELECT SCHEMAID,PARENT_TABLEID,CHILD_TABLEID,RELATIONSHIPID,PARENT_KEYID,CHILD_KEYID FROM PUBLIC.RELATIONSHIPKEYPAIR;OPEN RESULT;END
CREATE PROCEDURE PUBLIC.TABLEKEY_KEYTYPE_SELECT(IN V_SCHEMAID INTEGER,IN V_TABLEID INTEGER) SPECIFIC TABLEKEY_KEYTYPE_SELECT_10290 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL  DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE RESULT CURSOR FOR SELECT SCHEMAID,TABLEID,KEYID,NAME,LABEL,ISPK,TYPEID,B.NAME AS TYPENAME,CASE B.NAME WHEN'IDENTITY'THEN TRUE ELSE FALSE END AS ISIDENTITY,PRECISIONREQUIRED,PRECISION,SCALEREQUIRED,SCALE,ORDEN FROM PUBLIC.TABLEKEY A,PUBLIC.KEYTYPE B WHERE A.TYPEID=B.TYPEID AND SCHEMAID=V_SCHEMAID AND TABLEID=V_TABLEID ORDER BY ORDEN,NAME;OPEN RESULT;END
CREATE PROCEDURE PUBLIC.RELATIONSHIP_MULTIPLE_SELECT(IN V_SCHEMAID INTEGER) SPECIFIC RELATIONSHIP_MULTIPLE_SELECT_10292 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL  DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE RESULT CURSOR FOR SELECT SCHEMAID,PARENT_TABLEID,B.NAME AS PARENT,CHILD_TABLEID,C.NAME AS CHILD,RELATIONSHIPTYPEID,RELATIONSHIPID,D.NAME AS RELATIONSHIPTYPENAME FROM PUBLIC.RELATIONSHIP A,PUBLIC.DATABASETABLE B,PUBLIC.DATABASETABLE C,PUBLIC.RELATIONSHIPTYPE D WHERE SCHEMAID=V_SCHEMAID AND A.SCHEMAID=B.SCHEMAID AND A.SCHEMAID=C.SCHEMAID AND A.PARENT_TABLEID=B.TABLEID AND A.CHILD_TABLEID=C.TABLEID AND A.RELATIONSHIPTYPEID=D.RELATIONSHIPTYPEID ORDER BY PARENT,RELATIONSHIPTYPEID,CHILD;OPEN RESULT;END
CREATE PROCEDURE PUBLIC.TABLEKEY_SELECT_PK(IN V_SCHEMAID INTEGER,IN V_TABLEID INTEGER) SPECIFIC TABLEKEY_SELECT_PK_10294 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL  DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE RESULT CURSOR FOR SELECT SCHEMAID,TABLEID,KEYID,NAME,LABEL,ISPK,TYPEID,PRECISION,SCALE,ORDEN FROM PUBLIC.TABLEKEY WHERE SCHEMAID=V_SCHEMAID AND TABLEID=V_TABLEID AND ISPK=TRUE;OPEN RESULT;END
CREATE PROCEDURE PUBLIC.TABLEKEY_SELECT_NPK(IN V_SCHEMAID INTEGER,IN V_TABLEID INTEGER) SPECIFIC TABLEKEY_SELECT_NPK_10296 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL  DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE RESULT CURSOR FOR SELECT SCHEMAID,TABLEID,KEYID,NAME,LABEL,ISPK,TYPEID,PRECISION,SCALE,ORDEN FROM PUBLIC.TABLEKEY WHERE SCHEMAID=V_SCHEMAID AND TABLEID=V_TABLEID AND ISPK=FALSE;OPEN RESULT;END
CREATE PROCEDURE PUBLIC.RELATIONSHIPKEYPAIR_MULTIPLE_SELECT(IN V_SCHEMAID INTEGER,IN V_PARENT_TABLEID INTEGER,IN V_CHILD_TABLEID INTEGER,IN V_RELATIONSHIPID INTEGER) SPECIFIC RELATIONSHIPKEYPAIR_MULTIPLE_SELECT_10298 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL  DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE RESULT CURSOR FOR SELECT SCHEMAID,PARENT_TABLEID,CHILD_TABLEID,RELATIONSHIPID,PARENT_KEYID,CHILD_KEYID,B.NAME AS PARENT,C.NAME AS CHILD FROM PUBLIC.RELATIONSHIPKEYPAIR A,PUBLIC.TABLEKEY B,PUBLIC.TABLEKEY C WHERE SCHEMAID=V_SCHEMAID AND PARENT_TABLEID=V_PARENT_TABLEID AND CHILD_TABLEID=V_CHILD_TABLEID AND RELATIONSHIPID=V_RELATIONSHIPID AND A.SCHEMAID=B.SCHEMAID AND A.PARENT_TABLEID=B.TABLEID AND A.PARENT_KEYID=B.KEYID AND A.SCHEMAID=C.SCHEMAID AND A.CHILD_TABLEID=C.TABLEID AND A.CHILD_KEYID=C.KEYID;OPEN RESULT;END
CREATE PROCEDURE PUBLIC.RELATIONSHIP_SELECTONLYNAMES(IN V_SCHEMAID INTEGER) SPECIFIC RELATIONSHIP_SELECTONLYNAMES_10343 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL  DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE RESULT CURSOR FOR SELECT A.PARENT,A.CHILD,A.RELATIONSHIPID,A.RELATIONSHIPTYPEID,A.PARENT_KEY,A.CHILD_KEY FROM(SELECT A.SCHEMAID,A.PARENT_TABLEID,A.CHILD_TABLEID,A.RELATIONSHIPID,A.RELATIONSHIPTYPEID,A.PARENT,A.CHILD,A.PARENT_KEYID,A.CHILD_KEYID,B.NAME AS PARENT_KEY,C.NAME AS CHILD_KEY FROM(SELECT A.SCHEMAID,A.PARENT_TABLEID,A.CHILD_TABLEID,A.RELATIONSHIPID,A.RELATIONSHIPTYPEID,A.PARENT,A.CHILD,B.PARENT_KEYID,B.CHILD_KEYID FROM(SELECT A.SCHEMAID,A.PARENT_TABLEID,A.CHILD_TABLEID,A.RELATIONSHIPID,A.RELATIONSHIPTYPEID,B.NAME AS PARENT,C.NAME AS CHILD FROM PUBLIC.RELATIONSHIP A,PUBLIC.DATABASETABLE B,PUBLIC.DATABASETABLE C WHERE A.SCHEMAID=B.SCHEMAID AND A.PARENT_TABLEID=B.TABLEID AND A.SCHEMAID=C.SCHEMAID AND A.CHILD_TABLEID=C.TABLEID AND A.SCHEMAID=V_SCHEMAID)A,PUBLIC.RELATIONSHIPKEYPAIR B WHERE A.SCHEMAID=B.SCHEMAID AND A.PARENT_TABLEID=B.PARENT_TABLEID AND A.CHILD_TABLEID=B.CHILD_TABLEID AND A.RELATIONSHIPID=B.RELATIONSHIPID)A,PUBLIC.TABLEKEY B,PUBLIC.TABLEKEY C WHERE A.SCHEMAID=B.SCHEMAID AND A.PARENT_TABLEID=B.TABLEID AND A.PARENT_KEYID=B.KEYID AND A.SCHEMAID=C.SCHEMAID AND A.CHILD_TABLEID=C.TABLEID AND A.CHILD_KEYID=C.KEYID)A;OPEN RESULT;END
CREATE PROCEDURE PUBLIC.DATABASETABLE_COPY(IN V_SCHEMAID_OLD INTEGER,IN V_SCHEMAID_NEW INTEGER) SPECIFIC DATABASETABLE_COPY_10308 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC INSERT INTO PUBLIC.DATABASETABLE(SCHEMAID,TABLEID,NAME)SELECT V_SCHEMAID_NEW,TABLEID,NAME FROM PUBLIC.DATABASETABLE WHERE SCHEMAID=V_SCHEMAID_OLD;END
CREATE PROCEDURE PUBLIC.TABLEKEY_COPY(IN V_SCHEMAID INTEGER,IN V_TABLEID_OLD INTEGER,IN V_TABLEID_NEW INTEGER) SPECIFIC TABLEKEY_COPY_10310 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC INSERT INTO PUBLIC.TABLEKEY(SCHEMAID,TABLEID,KEYID,NAME,LABEL,ISPK,TYPEID,PRECISION,SCALE,ORDEN)SELECT SCHEMAID,V_TABLEID_NEW,KEYID,NAME,LABEL,ISPK,TYPEID,PRECISION,SCALE,ORDEN FROM PUBLIC.TABLEKEY WHERE SCHEMAID=V_SCHEMAID AND TABLEID=V_TABLEID_OLD;END
CREATE PROCEDURE PUBLIC.TABLEKEY_COPY(IN V_SCHEMAID_OLD INTEGER,IN V_SCHEMAID_NEW INTEGER) SPECIFIC TABLEKEY_COPY_10314 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC INSERT INTO PUBLIC.TABLEKEY(SCHEMAID,TABLEID,KEYID,NAME,LABEL,ISPK,TYPEID,PRECISION,SCALE,ORDEN)SELECT V_SCHEMAID_NEW,TABLEID,KEYID,NAME,LABEL,ISPK,TYPEID,PRECISION,SCALE,ORDEN FROM PUBLIC.TABLEKEY WHERE SCHEMAID=V_SCHEMAID_OLD;END
CREATE PROCEDURE PUBLIC.RELATIONSHIP_COPY(IN V_SCHEMAID_OLD INTEGER,IN V_SCHEMAID_NEW INTEGER) SPECIFIC RELATIONSHIP_COPY_10312 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC INSERT INTO PUBLIC.RELATIONSHIP(SCHEMAID,PARENT_TABLEID,CHILD_TABLEID,RELATIONSHIPID,RELATIONSHIPTYPEID)SELECT V_SCHEMAID_NEW,PARENT_TABLEID,CHILD_TABLEID,RELATIONSHIPID,RELATIONSHIPTYPEID FROM PUBLIC.RELATIONSHIP WHERE SCHEMAID=V_SCHEMAID_OLD;END
CREATE PROCEDURE PUBLIC.RELATIONSHIPKEYPAIR_COPY(IN V_SCHEMAID_OLD INTEGER,IN V_SCHEMAID_NEW INTEGER) SPECIFIC RELATIONSHIPKEYPAIR_COPY_10316 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC INSERT INTO PUBLIC.RELATIONSHIPKEYPAIR(SCHEMAID,PARENT_TABLEID,CHILD_TABLEID,RELATIONSHIPID,PARENT_KEYID,CHILD_KEYID)SELECT V_SCHEMAID_NEW,PARENT_TABLEID,CHILD_TABLEID,RELATIONSHIPID,PARENT_KEYID,CHILD_KEYID FROM PUBLIC.RELATIONSHIPKEYPAIR WHERE SCHEMAID=V_SCHEMAID_OLD;END
CREATE PROCEDURE PUBLIC.TABLE_COPY(IN V_SCHEMAID INTEGER,IN V_TABLEID_OLD INTEGER,IN V_TABLENAME VARCHAR(16777216)) SPECIFIC TABLE_COPY_10317 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC DECLARE V_TABLEID_NEW INTEGER;CALL DATABASETABLE_INSERT(V_SCHEMAID,V_TABLEID_NEW,V_TABLENAME);CALL TABLEKEY_COPY(V_SCHEMAID,V_TABLEID_OLD,V_TABLEID_NEW);END
CREATE PROCEDURE PUBLIC.DATABASESCHEMA_COPY(IN V_SCHEMAID_OLD INTEGER,IN V_SCHEMANAME_NEW VARCHAR(16777216)) SPECIFIC DATABASESCHEMA_COPY_10318 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC DECLARE V_SCHEMAID_NEW INTEGER;CALL DATABASESCHEMA_INSERT(V_SCHEMAID_NEW,V_SCHEMANAME_NEW);CALL DATABASETABLE_COPY(V_SCHEMAID_OLD,V_SCHEMAID_NEW);CALL RELATIONSHIP_COPY(V_SCHEMAID_OLD,V_SCHEMAID_NEW);CALL TABLEKEY_COPY(V_SCHEMAID_OLD,V_SCHEMAID_NEW);CALL RELATIONSHIPKEYPAIR_COPY(V_SCHEMAID_OLD,V_SCHEMAID_NEW);END
ALTER TABLE PUBLIC.TABLEKEY ADD CONSTRAINT KEYTYPE_TABLEKEY_RELATIONSHIP FOREIGN KEY(TYPEID) REFERENCES PUBLIC.KEYTYPE(TYPEID) ON DELETE CASCADE
ALTER SEQUENCE SYSTEM_LOBS.LOB_ID RESTART WITH 1
SET DATABASE DEFAULT INITIAL SCHEMA PUBLIC
GRANT USAGE ON DOMAIN INFORMATION_SCHEMA.SQL_IDENTIFIER TO PUBLIC
GRANT USAGE ON DOMAIN INFORMATION_SCHEMA.YES_OR_NO TO PUBLIC
GRANT USAGE ON DOMAIN INFORMATION_SCHEMA.TIME_STAMP TO PUBLIC
GRANT USAGE ON DOMAIN INFORMATION_SCHEMA.CARDINAL_NUMBER TO PUBLIC
GRANT USAGE ON DOMAIN INFORMATION_SCHEMA.CHARACTER_DATA TO PUBLIC
GRANT DBA TO SA
SET SCHEMA SYSTEM_LOBS
INSERT INTO BLOCKS VALUES(0,2147483647,0)
SET SCHEMA PUBLIC
INSERT INTO DATABASESCHEMA VALUES(0,'Rolodex')
INSERT INTO DATABASESCHEMA VALUES(1,'Sales_Schema')
INSERT INTO DATABASESCHEMA VALUES(2,'Sales_Dimensional_Schema')
INSERT INTO DATABASETABLE VALUES(0,0,'Person')
INSERT INTO DATABASETABLE VALUES(0,1,'Address')
INSERT INTO DATABASETABLE VALUES(0,2,'AddressUsage')
INSERT INTO DATABASETABLE VALUES(1,3,'Product')
INSERT INTO DATABASETABLE VALUES(1,4,'Customer')
INSERT INTO DATABASETABLE VALUES(1,5,'ProductSales')
INSERT INTO DATABASETABLE VALUES(2,6,'DailySalesFact')
INSERT INTO DATABASETABLE VALUES(2,7,'ProductDimension')
INSERT INTO DATABASETABLE VALUES(2,8,'StoreDimension')
INSERT INTO DATABASETABLE VALUES(2,9,'DateDimension')
INSERT INTO TABLEKEY VALUES(0,0,0,'PersonId','PersonId',TRUE,0,0,0,1)
INSERT INTO TABLEKEY VALUES(0,0,1,'PersonName','PersonName',FALSE,3,8000,0,2)
INSERT INTO TABLEKEY VALUES(0,1,2,'AddressId','AddressId',TRUE,0,0,0,1)
INSERT INTO TABLEKEY VALUES(0,1,3,'AddressDetail','AddressDetail',FALSE,3,8000,0,2)
INSERT INTO TABLEKEY VALUES(0,2,4,'PersonId','PersonId',TRUE,1,0,0,1)
INSERT INTO TABLEKEY VALUES(0,2,5,'AddressId','AddressId',TRUE,1,0,0,2)
INSERT INTO TABLEKEY VALUES(0,2,6,'AddressUsageType','AddressUsageType',TRUE,1,0,0,3)
INSERT INTO TABLEKEY VALUES(0,2,7,'AddressUsageStartDate','AddressUsageStartDate',FALSE,4,0,0,4)
INSERT INTO TABLEKEY VALUES(1,3,8,'ProductId','ProductId',TRUE,1,0,0,1)
INSERT INTO TABLEKEY VALUES(1,3,9,'ProductName','ProductName',FALSE,1,0,0,2)
INSERT INTO TABLEKEY VALUES(1,4,10,'CustomerId','CustomerId',TRUE,1,0,0,1)
INSERT INTO TABLEKEY VALUES(1,4,11,'CustomeName','CustomeName',FALSE,3,8000,0,2)
INSERT INTO TABLEKEY VALUES(1,5,12,'CustomerId','CustomerId',TRUE,1,0,0,1)
INSERT INTO TABLEKEY VALUES(1,5,13,'ProductId','ProductId',TRUE,1,0,0,2)
INSERT INTO TABLEKEY VALUES(1,5,14,'Quantity','Quantity',FALSE,2,0,0,3)
INSERT INTO TABLEKEY VALUES(1,5,15,'UnitPrice','UnitPrice',FALSE,2,0,0,4)
INSERT INTO TABLEKEY VALUES(1,5,16,'SalesDate','SalesDate',FALSE,4,0,0,5)
INSERT INTO TABLEKEY VALUES(2,6,17,'DateKey','DateKey',TRUE,1,0,0,1)
INSERT INTO TABLEKEY VALUES(2,6,18,'ProductKey','ProductKey',TRUE,1,0,0,2)
INSERT INTO TABLEKEY VALUES(2,6,19,'StoreKey','StoreKey',TRUE,1,0,0,3)
INSERT INTO TABLEKEY VALUES(2,6,20,'QuantitySold','QuantitySold',FALSE,2,0,0,4)
INSERT INTO TABLEKEY VALUES(2,6,21,'DollarSalesAmount','DollarSalesAmount',FALSE,2,0,0,5)
INSERT INTO TABLEKEY VALUES(2,7,22,'ProductKey','ProductKey',TRUE,1,0,0,1)
INSERT INTO TABLEKEY VALUES(2,7,23,'ProductDescription','ProductDescription',FALSE,3,8000,0,2)
INSERT INTO TABLEKEY VALUES(2,7,24,'CategoryDescription','CategoryDescription',FALSE,3,8000,0,3)
INSERT INTO TABLEKEY VALUES(2,8,25,'StoreKey','StoreKey',TRUE,1,0,0,1)
INSERT INTO TABLEKEY VALUES(2,8,26,'StoreNumber','StoreNumber',FALSE,1,0,0,2)
INSERT INTO TABLEKEY VALUES(2,8,27,'StoreZip','StoreZip',FALSE,1,0,0,3)
INSERT INTO TABLEKEY VALUES(2,9,28,'DateKey','DateKey',TRUE,1,0,0,1)
INSERT INTO TABLEKEY VALUES(2,9,29,'TheDate','TheDate',FALSE,4,0,0,2)
INSERT INTO TABLEKEY VALUES(2,9,30,'TheMonth','TheMonth',FALSE,1,0,0,3)
INSERT INTO TABLEKEY VALUES(2,9,31,'TheYear','TheYear',FALSE,1,0,0,4)
INSERT INTO KEYTYPE VALUES(0,'IDENTITY',FALSE,FALSE)
INSERT INTO KEYTYPE VALUES(1,'INTEGER',FALSE,FALSE)
INSERT INTO KEYTYPE VALUES(2,'DOUBLE',FALSE,FALSE)
INSERT INTO KEYTYPE VALUES(3,'LONGVARCHAR',FALSE,FALSE)
INSERT INTO KEYTYPE VALUES(4,'DATE',FALSE,FALSE)
INSERT INTO RELATIONSHIPTYPE VALUES(0,'Identifying')
INSERT INTO RELATIONSHIPTYPE VALUES(1,'Non-Identifying')
INSERT INTO RELATIONSHIP VALUES(0,0,2,0,0)
INSERT INTO RELATIONSHIP VALUES(0,1,2,1,0)
INSERT INTO RELATIONSHIP VALUES(1,3,5,2,0)
INSERT INTO RELATIONSHIP VALUES(1,4,5,3,0)
INSERT INTO RELATIONSHIP VALUES(2,7,6,4,0)
INSERT INTO RELATIONSHIP VALUES(2,8,6,5,0)
INSERT INTO RELATIONSHIP VALUES(2,9,6,6,0)
INSERT INTO RELATIONSHIPKEYPAIR VALUES(0,0,2,0,0,4)
INSERT INTO RELATIONSHIPKEYPAIR VALUES(0,1,2,1,2,5)
INSERT INTO RELATIONSHIPKEYPAIR VALUES(1,3,5,2,8,13)
INSERT INTO RELATIONSHIPKEYPAIR VALUES(1,4,5,3,10,12)
INSERT INTO RELATIONSHIPKEYPAIR VALUES(2,7,6,4,22,18)
INSERT INTO RELATIONSHIPKEYPAIR VALUES(2,8,6,5,25,19)
INSERT INTO RELATIONSHIPKEYPAIR VALUES(2,9,6,6,28,17)
